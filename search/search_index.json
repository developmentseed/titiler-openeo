{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"openEO by TiTiler","text":"<p>TiTiler backend for openEO</p> <p></p>"},{"location":"#overview","title":"Overview","text":"<p><code>titiler-openeo</code> is a TiTiler backend implementation for openEO developed by  and .</p> <p>The main goal of this project is to provide a light and fast backend for openEO services and processes using the TiTiler engine. This simplicity comes with some specific implementation choices like the type of data managed by the backend. It is focused on image raster data that can be processed on-the-fly and served as tiles or as light dynamic raw data. A concept note is available here to describe in more detail the implementation choices.</p> <p>The application provides with a minimal openEO API (L1A and L1C).</p>"},{"location":"#features","title":"Features","text":"<ul> <li>STAC API integration with external STAC services</li> <li>Synchronous processing</li> <li>Various output formats (e.g., JPEG, PNG)</li> <li>Multiple supported processes</li> <li>Dynamic tiling services</li> <li>FastAPI-based application</li> <li>Middleware for CORS, compression, and caching</li> </ul>"},{"location":"#roadmap","title":"Roadmap","text":"<ul> <li> Services Management (CRUD <code>/services</code> endpoints)</li> <li> Integrated Authentication</li> <li> More output formats</li> <li> More openEO processes</li> <li> Github pages documentation</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>To install <code>titiler-openeo</code>, clone the repository and install the dependencies:</p> <pre><code>git clone https://github.com/sentinel-hub/titiler-openeo.git\ncd titiler-openeo\npython -m pip install -e .\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>To run the application, use the following command:</p> <pre><code>cp .env.eoapi .env\nexport $(cat .env | xargs)\nuvicorn titiler.openeo.main:app --host 0.0.0.0 --port 8080\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>Configuration settings can be provided via environment variables. The following settings are available:</p> <ul> <li>TITILER_OPENEO_STAC_API_URL: URL of the STAC API with the collections to be used</li> <li>TITILER_OPENEO_SERVICE_STORE_URL: URL of the openEO service store json file</li> </ul> <p>In this repository, 2 <code>.env</code> sample files are provided:</p> <ul> <li><code>.env.eoapi</code> that uses the Earth Observation API (EOAPI).</li> </ul> <pre><code>TITILER_OPENEO_STAC_API_URL=\"https://stac.eoapi.dev\"\nTITILER_OPENEO_SERVICE_STORE_URL=\"services/eoapi.json\"\n</code></pre> <ul> <li><code>.env.cdse</code>] that uses the Copernicus Data Space Ecosystem (CDSE)</li> </ul> <pre><code>TITILER_OPENEO_SERVICE_STORE_URL=\"https://stac.dataspace.copernicus.eu/v1\"\nTITILER_OPENEO_SERVICE_STORE_URL=\"services/copernicus.json\"\n</code></pre> <p>In order to access asset object store and to retrieve data efficiently, it requires to set additional environment variables:</p> <pre><code>AWS_S3_ENDPOINT=eodata.dataspace.copernicus.eu # CDSE S3 endpoint URL\nAWS_ACCESS_KEY_ID=&lt;your_access_key&gt; # S3 access key\nAWS_SECRET_ACCESS_KEY=&lt;your_secret_key&gt; # S3 secret key\nAWS_VIRTUAL_HOSTING=FALSE # Disable virtual hosting\nCPL_VSIL_CURL_CACHE_SIZE=200000000 # Global LRU cache size\nGDAL_HTTP_MULTIPLEX=TRUE # Enable HTTP multiplexing\nGDAL_CACHEMAX=500 # Set GDAL cache size\nGDAL_INGESTED_BYTES_AT_OPEN=50000 # Open a larger bytes range when reading\nGDAL_HTTP_MERGE_CONSECUTIVE_RANGES=YES # Merge consecutive ranges\nVSI_CACHE_SIZE=5000000 # Set VSI cache size\nVSI_CACHE=TRUE # Enable VSI cache\n</code></pre> <p>visit 'Access to EO data via S3' for information on how to access the Copernicus Data Space Ecosystem (CDSE) data via S3.</p>"},{"location":"#development","title":"Development","text":"<p>To set up a development environment, install the development dependencies:</p> <pre><code>python -m pip install -e \".[test,dev]\"\npre-commit install\n</code></pre>"},{"location":"#running-tests","title":"Running Tests","text":"<p>To run the tests, use the following command:</p> <pre><code>python -m pytest\n</code></pre>"},{"location":"#use-the-openeo-editor","title":"Use the openEO editor","text":"<p>To use the openEO editor, start the server as described in usage section. Then, run the following command:</p> <pre><code>docker pull mundialis/openeo-web-editor:latest\ndocker run -p 8081:80 mundialis/openeo-web-editor:latest\n</code></pre> <p>Then, open the editor in your browser at localhost:8081. In the editor, set the openEO backend URL to localhost:8080. Login with the following credentials:</p> <ul> <li>Username: <code>anonymous</code></li> <li>Password: <code>test</code></li> </ul>"},{"location":"#license","title":"License","text":"<p>See LICENSE</p>"},{"location":"#authors","title":"Authors","text":"<p>Created by Development Seed and Sinergise.</p> <p>See contributors for a listing of individual contributors.</p>"},{"location":"#changes","title":"Changes","text":"<p>See CHANGES.md.</p>"},{"location":"concepts/","title":"Concept Note","text":""},{"location":"concepts/#context","title":"Context","text":"<p>openEO serves as an abstraction layer for Earth Observation (EO) processing and has gained significant traction within the community. Several data hubs now offer openEO as a service, notably the Copernicus Data Space Ecosystem, Terrascope, and EODC. Additionally, EOEPCA+, with its processing building block, is furthering the deployment of openEO.</p> <p>To enhance the value of openEO as an abstraction for essential services like STAC-based data collections, data processing methods, visualization services, and compute infrastructure, it is necessary for more commonly used raster processing and visualization services to provide an openEO interface. For instance, the openEO Sentinel Hub driver allows users to interact with Sentinel Hub features via an openEO interface. </p> <p>Moreover, TiTiler facilitates dynamic tiling of STAC raster datasets and OGC Features, serving as a core component of eoAPI, Development Seed's open-source, interoperable EO data services stack.</p> <p>In this context, Development Seed presents its own implementation of openEO, featuring a fast and lightweight solution to efficiently manage raster-based processes.</p>"},{"location":"concepts/#overview","title":"Overview","text":"<p>The main goal of this project is to provide a light and fast backend for openEO services and processes using the same features as the TiTiler engine:</p> <ul> <li>Built on top of FastAPI</li> <li>Cloud Optimized GeoTIFF support</li> <li>SpatioTemporal Asset Catalog support</li> <li>Multiple projections support (see TileMatrixSets) via morecantile.</li> <li>JPEG / JP2 / PNG / WEBP / GTIFF / NumpyTile output format support</li> <li>XYZ service support</li> <li>Automatic OpenAPI documentation (FastAPI builtin)</li> </ul>"},{"location":"concepts/#api","title":"API","text":"<p>The application provides with openEO API (L1A and L1C).</p>"},{"location":"concepts/#synchronous-processing-l1a-profile","title":"Synchronous Processing (L1A profile)","text":"<p>The synchronous processing endpoints aim at processing and downloading data synchronously. The <code>POST /results</code> executes a user-defined process directly (synchronously) and the result is downloaded in the format specified in the process graph. This endpoint can be used to generate small previews including few data sources (typically tiles) or test user-defined processes before starting a batch job. Timeouts on either client- or server-side are to be expected for complex computations. Back-ends MAY send the openEO error ProcessGraphComplexity immediately if the computation is expected to time out. Otherwise requests MAY time-out after a certain amount of time by sending openEO error RequestTimeout</p>"},{"location":"concepts/#secondary-web-services-l1c-profile","title":"Secondary Web Services (L1C profile)","text":"<p>The set of secondary web services endpoints aims to provide data visualization with dynamic tiling according to a process graph submitted or available in the API.</p>"},{"location":"concepts/#data-model","title":"Data Model","text":"<p>In openEO, a datacube is a fundamental concept and a key component of the platform. Data is represented as datacubes in openEO, which are multi-dimensional arrays with additional information about their dimensionality. Datacubes are powerful but can also be heavy to manipulate and often requires asynchronous processing to properly process and serve the data. Unlike most of the existing openEO implementation, <code>titiler-openeo</code> project simplifies this concept by focusing on image raster data that can be processed on-the-fly and served as tiles or as light dynamic raw data.</p>"},{"location":"concepts/#raster-with-imagedata","title":"Raster with ImageData","text":"<p>In order to make the processing as light and fast as possible, the backend must manipulate the data in a way that is easy to process and serve. That is why most of the processes use <code>ImageData</code> object type for passing data between the nodes of a process graph. <code>ImageData</code> is provided by rio-tiler that was initially designed to create slippy map tiles from large raster data sources and render these tiles dynamically on a web map.</p> <p></p>"},{"location":"concepts/#reducing-the-data","title":"Reducing the data","text":"<p>The ImageData object is obtained by reducing as early as possible the data from the collections. While the traditional <code>load_collections</code> process is implemented and can be used, it is recommended to use the <code>load_collection_and_reduce</code> process to have immediately an <code>imagedata</code> object to manipulate. The <code>load_collection_and_reduce</code> process actually apply the <code>apply_pixel_selection</code> process on a stack of raster data that are loaded from the collections.</p> <p></p> <p>The reduce process comes with a parameter to choose the pixel selection method to apply on the stack of raster data. The default method is <code>first</code> that will select the first pixel value of the stack. Other methods are available like <code>highest</code>, <code>lowest</code>, <code>mean</code>, <code>median</code>, <code>stddev</code>, <code>lastbandlow</code>, <code>lastbandhigh</code>, <code>lastbandavg</code>, <code>count</code>.</p>"},{"location":"concepts/#collections","title":"Collections","text":"<p>In openEO, the backend offers set of collections to be processed. <code>titiler-openeo</code> offers the possibiltiy to use external STAC API services to get the collections. It uses <code>pystac-client</code> to proxy the STAC API and get the collections. The STAC API is configured through <code>TITILER_OPENEO_SERVICE_STORE_URL</code> environment variable.</p>"},{"location":"concepts/#file-formats","title":"File formats","text":"<p>Since the backend is built on top of the TiTiler engine, it supports the same output formats:</p> <ul> <li>JPEG</li> <li>PNG</li> </ul>"},{"location":"concepts/#processes","title":"Processes","text":"<p><code>titiler-openeo</code> supports a set of processes that can be used in a process graph. There are mostly focused on raster processing.</p>"},{"location":"concepts/#load-collection","title":"Load Collection","text":"<p>The <code>load_collection</code> process is used to load a collection from the STAC API. In <code>titiler-openeo</code>, it also returns a <code>Datacube</code> object type that needs to be reduced to an <code>ImageData</code> object type to be used with most of the other process.</p>"},{"location":"concepts/#general-limitations","title":"General limitations","text":"<p>The backend is designed to process and serve raster data that can be processed on-the-fly and served as tiles or as light dynamic raw data. So as a rule of thumb, bigger the initial extent of the data to process, the longer the processing time will be and thus may lead to timeouts.</p> <p>Since titiler-openeo does not require any other middleware to be deployed, it can be easily replicated and scaled.</p>"},{"location":"contributing/","title":"Development - Contributing","text":"<p>Issues and pull requests are more than welcome: github.com/sentinel-hub/titiler-openeo/issues</p> <p>dev install</p> <pre><code>git clone https://github.com/sentinel-hub/titiler-openeo.git\ncd titiler\n\npython -m pip install -e \".[test,dev]\"\n</code></pre> <p>pre-commit</p> <p>This repo is set to use <code>pre-commit</code> to run isort, flake8, pydocstring, black (\"uncompromising Python code formatter\") and mypy when committing new code.</p> <pre><code>pre-commit install\n</code></pre>"},{"location":"contributing/#run-tests","title":"Run tests","text":"<pre><code>python -m pytest --cov=titiler.openeo --cov-report=xml --cov-append --cov-report=term-missing\n</code></pre>"},{"location":"contributing/#docs","title":"Docs","text":"<pre><code>git clone https://github.com/sentinel-hub/titiler-openeo.git\ncd titiler\npython -m pip install -e \".[docs]\"\n</code></pre> <p>Hot-reloading docs:</p> <pre><code>mkdocs serve -f docs/mkdocs.yml\n</code></pre> <p>To manually deploy docs (note you should never need to do this because Github Actions deploys automatically for new commits.):</p> <pre><code>mkdocs gh-deploy -f docs/mkdocs.yml\n</code></pre>"},{"location":"release-notes/","title":"Release Notes","text":""},{"location":"release-notes/#unreleased-tbd","title":"Unreleased (TBD)","text":"<p>Initial release</p>"}]}